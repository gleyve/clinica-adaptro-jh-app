DEFAULT_MIN_LENGTH = 3
DEFAULT_MAX_LENGTH = 100

enum TipoParentesco{
	PAI("Pai"),
    MAE("Mãe"),
    AVO("Avô(ó)"),
    TIO("Tio(a)"),
    AMIGO("Amigo(a)"),
    CONJUGE("Esposo(a)"),
    OUTURO("Outro)")
}

enum Convenio{
	UNIMED_CE("UNIMED CEARÁ"),
    OUTRO("Outro")
}

enum Procedencia{
	ENCAMINHAMENTO_MEDICO("Encaminhamento Médico"),
    INDICACAO_PACIENTE("Indicação de Paciente"),
    INDICACAO_MEDICO("Guia Médico"),
    INDICACAO_MEDICO("Parente de um Paciente"),
    INTERNET("Conheceu pela Internet"),
    OUTRO("Outro")
}

enum EstadoCivil{
	SOLTEIRO("Solteiro"),
    CASADO("Casado"),
    SEPARADO("Separado"),
    DIVORCIADO("Divorciado")
    VIUVO("Viúvo"),
    UNIAO_ESTAVEL("União Estável"),
    OUTRO("Outro")
}

enum Escolaridade{
	EFC("Ensino Fundamental Completo"),
    EFI("Ensino Fundamental Incompleto"),
    ESC("Ensino Superior Completo"),
    ESI("Ensino Superior Incompleto"),
    PGC("Pós-Graduação Completo"),
    PGI("Pós-Graduação Incompleto"),
    MES("Mestrado"),
    DOU("Doutorado")
}

enum Sexo{
	MASC("MASCULINO"),
    FEM("FEMININO")
}

enum TipoCliente{
    PACIENTE("Paciente"),
	OUTRO("Responsável por paciente ou Outros")
}


enum Estado {
	AC("Acre"),
	AL("Alagoas"),
	AM("Amazonas"),
	AP("Amapá"),
	BA("Bahia"),
	CE("Ceará"),
	DF("Distrito Federal"),
	ES("Espírito Santo"),
	GO("Goiás"),
	MA("Maranhão"),
	MG("Minas Gerais"),
	MS("Mato Grosso do Sul"),
	MT("Mato Grosso"),
	PA("Pará"),
	PB("Paraíba"),
	PE("Pernambuco"),
	PI("Piauí"),
	PR("Paraná"),
	RJ("Rio de Janeiro"),
	RN("Rio Grande do Norte"),
	RO("Rondônia"),
	RR("Roraima"),
	RS("Rio Grande do Sul"),
	SC("Santa Catarina"),
	SE("Sergipe"),
	SP("São Paulo"),
	TO("Tocantins")
}

entity Cliente {
	TipoCliente TipoCliente required,
	matricula String unique minlength(11) maxlength(11),
    nomeCompleto String required maxlength(DEFAULT_MAX_LENGTH),
    foto ImageBlob maxbytes(2024),
    dataNascimento LocalDate required,
    sexo Sexo required,
    estadoCivil EstadoCivil required,
    escolaridade Escolaridade,
	convenio Convenio required,
    numCarteirinhaConvenio String unique,
    dataValidadeConvenio LocalDate,
    procedencia Procedencia,
    profissao String maxlength(50),
    cpf String unique pattern (/(\d{3})(\d{3})(\d{3})(\d{2})/),
    rg String unique maxlength(15),
    telefone1 String required pattern(/^(\d{2,3}|\(\d{2,3}\))?[ ]?\d{3,4}[-]?\d{3,4}$/),
    telefone2 String pattern(/^(\d{2,3}|\(\d{2,3}\))?[ ]?\d{3,4}[-]?\d{3,4}$/),
    email String maxlength(70) minlength(5) pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
    logradouroNome String minlength(5) maxlength(70),
    logradouroNumero String maxlength(5),
    logradouroComplemento String maxlength(50),
    bairro String minlength(DEFAULT_MIN_LENGTH) maxlength(30),
	cep String pattern(/^[0-9]{5}-[0-9]{3}$/),
	cidade String minlength(DEFAULT_MIN_LENGTH) maxlength(30),
	estado Estado,
	parentescoResponsavel TipoParentesco,
	parentescoResponsavelFinanceiro TipoParentesco,
    dataHoraCadastro Instant required,
    ativo Boolean,
    observacao String maxlength(255),
    detalhamento TextBlob
}

relationship ManyToOne {
  Cliente{responsavel(nomeCompleto)} to Cliente
  Cliente{responsavelFinanceiro(nomeCompleto)} to Cliente
}


filter Cliente
paginate Cliente with pagination
service Cliente with serviceClass


#No services specified will create a resource class which will call the repository interface directly. This is the default and simplest option
#service with serviceClass will make the resource call the service class which will call the repository interface. 
#service with serviceImpl will make a service interface which will be used by the resource class.
#Using no service unless sure is the simplest option and good for CRUD. Use service with a Class if you will have a lot of business logic which will use #multiple repositories making it ideal for a service class. JHipsters are not fan of unnecessary Interfaces but if you like them go for service with impl.


#https://www.jhipster.tech/jdl/options
#readOnly B, C
#dto * with mapstruct except C
#service * with serviceClass except C
#search A with elasticsearch
#service B with serviceClass
#service C with serviceImpl
#paginate A with infinite-scroll
#paginate B with pagination
#skipClient * except A - This will make the client code generation to be skipped
#skipServer * except A - This will make the server code generation to be skipped

#With joint fields: Used to specify which column in the entities are used for the join (default to id).
#relationship OneToOne {
#  A{b(name)} to B{a(name)}
#}
// Validations
# name String pattern(/^[A-Z][a-z]+\d$/)
#String	String	required, minlength, maxlength, pattern, unique
#Integer	Integer	required, min, max, unique
#Blob		required, minbytes, maxbytes, unique
// With required sides: Used to make at least one relationship side required.
// https://www.jhipster.tech/jdl/relationships#syntax
