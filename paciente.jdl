DEFAULT_MIN_LENGTH = 4
DEFAULT_MAX_LENGTH = 100

entity User{}

enum TipoResponsavel{
	PAI("Pai"),
    MAE("Mãe"),
    AVO("Avô(ó)"),
    TIO("Tio(a)"),
    AMIGO("Amigo(a)"),
    CONJUGE("Esposo(a)"),
    OUTURO("Outro)")
}

enum Convenio{
	UNIMED_CE("UNIMED CEARÁ"),
    OUTRO("Outro")
}

enum Procedencia{
	ENCAMINHAMENTO_MEDICO("Encaminhamento Médico"),
    INDICACAO_PACIENTE("Indicação de Paciente"),
    INDICACAO_MEDICO("Guia Médico"),
    INTERNET("Internet"),
    OUTRO("Outro")
}

enum EstadoCivil{
	SOLTEIRO("Solteiro"),
    CASADO("Casado"),
    SEPARADO("Separado"),
    DIVORCIADO("Divorciado")
    VIUVO("Viúvo"),
    UNIAO_ESTAVEL("União Estável"),
    OUTRO("Outro")
}

enum Escolaridade{
	EFC("Ensino Fundamental Completo"),
    EFI("Ensino Fundamental Incompleto"),
    ESC("Ensino Superior Completo"),
    ESI("Ensino Superior Incompleto"),
    PGC("Pós-Graduação Completo"),
    PGI("Pós-Graduação Incompleto"),
    MES("Mestrado"),
    DOU("Doutorado")
}

enum Sexo{
	MASC("MASCULINO"),
    FEM("FEMININO")
}

enum Estado {
	AC("Acre"),
	AL("Alagoas"),
	AM("Amazonas"),
	AP("Amapá"),
	BA("Bahia"),
	CE("Ceará"),
	DF("Distrito Federal"),
	ES("Espírito Santo"),
	GO("Goiás"),
	MA("Maranhão"),
	MG("Minas Gerais"),
	MS("Mato Grosso do Sul"),
	MT("Mato Grosso"),
	PA("Pará"),
	PB("Paraíba"),
	PE("Pernambuco"),
	PI("Piauí"),
	PR("Paraná"),
	RJ("Rio de Janeiro"),
	RN("Rio Grande do Norte"),
	RO("Rondônia"),
	RR("Roraima"),
	RS("Rio Grande do Sul"),
	SC("Santa Catarina"),
	SE("Sergipe"),
	SP("São Paulo"),
	TO("Tocantins")
}

entity Paciente {
	matricula String minlength(11) maxlength(11),
    nomeCompleto String required maxlength(DEFAULT_MAX_LENGTH),
    foto ImageBlob,
    dataNascimento LocalDate required,
    sexo Sexo required,
    estadoCivil EstadoCivil required,
    escolaridade Escolaridade,
	convenio Convenio required,
    numCarteirinhaConvenio String,
    dataValidadeConvenio LocalDate,
    procedencia Procedencia,
    profissao String maxlength(50),
    cpf String minlength(11) maxlength(11),
    rg String maxlength(15),
    telefone1 String required minlength(11) maxlength(15),
    telefone2 String minlength(11) maxlength(15),
    email String maxlength(50) minlength(5) pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
    logradouroNome String minlength(5) maxlength(70),
    logradouroNumero String maxlength(5),
    logradouroComplemento String maxlength(50),
    bairro String minlength(DEFAULT_MIN_LENGTH) maxlength(30),
	cep String maxlength(8),
	cidade String minlength(DEFAULT_MIN_LENGTH) maxlength(30),
	estado Estado,
	parentescoResponsavel1 TipoResponsavel,
	parentescoResponsavel2 TipoResponsavel,
    dataHoraCadastro Instant required,
    ativo Boolean,
    observacao String maxlength(255)
}

relationship OneToMany {
    Paciente{planejamentoEstrategico} to PlanejamentoEstrategico{paciente}
}

relationship ManyToOne {
    PlanejamentoEstrategico{user(login)} to User
	ResponsavelPaciente{pacienteResposavel} to Paciente
}

relationship ManyToMany {
  Paciente{responsavel1} to Paciente{dependente1}
  Paciente{responsavel2} to Paciente{dependente2}
}


filter Paciente
paginate Paciente with pagination
service Paciente with serviceClass


#No services specified will create a resource class which will call the repository interface directly. This is the default and simplest option
#service with serviceClass will make the resource call the service class which will call the repository interface. 
#service with serviceImpl will make a service interface which will be used by the resource class.
#Using no service unless sure is the simplest option and good for CRUD. Use service with a Class if you will have a lot of business logic which will use #multiple repositories making it ideal for a service class. JHipsters are not fan of unnecessary Interfaces but if you like them go for service with impl.


#https://www.jhipster.tech/jdl/options
#readOnly B, C
#dto * with mapstruct except C
#service * with serviceClass except C
#search A with elasticsearch
#service B with serviceClass
#service C with serviceImpl
#paginate A with infinite-scroll
#paginate B with pagination
#skipClient * except A - This will make the client code generation to be skipped
#skipServer * except A - This will make the server code generation to be skipped

#With joint fields: Used to specify which column in the entities are used for the join (default to id).
#relationship OneToOne {
#  A{b(name)} to B{a(name)}
#}

// With required sides: Used to make at least one relationship side required.
// https://www.jhipster.tech/jdl/relationships#syntax
