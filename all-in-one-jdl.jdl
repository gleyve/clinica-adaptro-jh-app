DEFAULT_MIN_LENGTH = 2
DEFAULT_MAX_LENGTH = 100

//Enums
enum Estado {
	AC("Acre"),
	AL("Alagoas"),
	AM("Amazonas"),
	AP("Amapá"),
	BA("Bahia"),
	CE("Ceará"),
	DF("Distrito Federal"),
	ES("Espírito Santo"),
	GO("Goiás"),
	MA("Maranhão"),
	MG("Minas Gerais"),
	MS("Mato Grosso do Sul"),
	MT("Mato Grosso"),
	PA("Pará"),
	PB("Paraíba"),
	PE("Pernambuco"),
	PI("Piauí"),
	PR("Paraná"),
	RJ("Rio de Janeiro"),
	RN("Rio Grande do Norte"),
	RO("Rondônia"),
	RR("Roraima"),
	RS("Rio Grande do Sul"),
	SC("Santa Catarina"),
	SE("Sergipe"),
	SP("São Paulo"),
	TO("Tocantins")
}

enum TipoParentesco{
	PAI("Pai"),
    MAE("Mãe"),
    AVO("Avô(ó)"),
    TIO("Tio(a)"),
    AMIGO("Amigo(a)"),
    CONJUGE("Esposo(a)"),
    OUTURO("Outro)")
}

enum Convenio{
	UNIMED_CE("UNIMED CEARÁ"),
    OUTRO("Outro")
}

enum Procedencia{
	ENCAMINHAMENTO_MEDICO("Encaminhamento Médico"),
    INDICACAO_PACIENTE("Indicação de Paciente"),
    INDICACAO_MEDICO("Guia Médico"),
    INDICACAO_MEDICO("Parente de um Paciente"),
    INTERNET("Conheceu pela Internet"),
    OUTRO("Outro")
}

enum EstadoCivil{
	SOLTEIRO("Solteiro"),
    CASADO("Casado"),
    SEPARADO("Separado"),
    DIVORCIADO("Divorciado")
    VIUVO("Viúvo"),
    UNIAO_ESTAVEL("União Estável"),
    OUTRO("Outro")
}

enum Escolaridade{
	EFC("Ensino Fundamental Completo"),
    EFI("Ensino Fundamental Incompleto"),
    ESC("Ensino Superior Completo"),
    ESI("Ensino Superior Incompleto"),
    PGC("Pós-Graduação Completo"),
    PGI("Pós-Graduação Incompleto"),
    MES("Mestrado"),
    DOU("Doutorado")
}

enum TipoCliente{
    PACIENTE("Paciente"),
	OUTRO("Responsável por paciente ou Outros")
}

enum TipoPessoa {
    F("FÍSICA"), 
    J("JURÍDICA")
}

enum CategoriaFuncionario{
	PROFISSIONAL_SAUDE("Profissional de Saúde"),
    RECEPCAO("Recepcionista"),
    ADMIN("Admin"),
    ESTAGIARIO("Estagiário"),
    OUTRO("Outro")
}

enum Sexo{
	MASC("Masculino"),
    FEM("Feminino")
}

//cliente
entity Cliente {
	TipoCliente TipoCliente required,
	matricula String unique minlength(11) maxlength(11),
    nomeCompleto String required maxlength(DEFAULT_MAX_LENGTH),
    foto ImageBlob maxbytes(2024),
    dataNascimento LocalDate required,
    sexo Sexo required,
    estadoCivil EstadoCivil required,
    escolaridade Escolaridade,
	convenio Convenio required,
    numCarteirinhaConvenio String unique,
    dataValidadeConvenio LocalDate,
    procedencia Procedencia,
    profissao String maxlength(50),
    cpf String unique pattern (/(\d{3})(\d{3})(\d{3})(\d{2})/),
    rg String unique maxlength(15),
    telefone1 String required pattern(/^(\d{2,3}|\(\d{2,3}\))?[ ]?\d{3,4}[-]?\d{3,4}$/),
    telefone2 String pattern(/^(\d{2,3}|\(\d{2,3}\))?[ ]?\d{3,4}[-]?\d{3,4}$/),
    email String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
    logradouroNome String minlength(5) maxlength(70),
    logradouroNumero String maxlength(5),
    logradouroComplemento String maxlength(50),
    bairro String minlength(DEFAULT_MIN_LENGTH) maxlength(30),
	cep String pattern(/^[0-9]{5}-[0-9]{3}$/),
	cidade String minlength(DEFAULT_MIN_LENGTH) maxlength(30),
	estado Estado,
	parentescoResponsavel TipoParentesco,
	parentescoResponsavelFinanceiro TipoParentesco,
    dataHoraCadastro Instant required,
    ativo Boolean,
    observacao String maxlength(255)
}

relationship ManyToOne {
  Cliente{responsavel(nomeCompleto)} to Cliente
  Cliente{responsavelFinanceiro(nomeCompleto)} to Cliente
}


entity PlanoEstrategico {
    dataInicio LocalDate,
    dataFim LocalDate,
    detalhamento String required maxlength(255),
    dataHoraCadastro Instant required,
}

relationship OneToMany {
    Cliente{planoEstrategico} to PlanoEstrategico{cliente(nomeCompleto)}
}

relationship ManyToOne {
    PlanoEstrategico{user(login)} to User
}


entity Fornecedor {
	tipoPessoa TipoPessoa required,
    numeroCPF String unique pattern(/(\d{3})(\d{3})(\d{3})(\d{2})/),
    numeroCNPJ String unique pattern(/(\d{2})(\d{3})(\d{3})(\d{3})(\d{2})/),
    nome String required minlength(5) maxlength(70),
    nomeFantasia String maxlength(70),
    email String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
    celular String required pattern(/^(\d{2,3}|\(\d{2,3}\))?[ ]?\d{3,4}[-]?\d{3,4}$/),
	telefone String pattern(/^(\d{2,3}|\(\d{2,3}\))?[ ]?\d{3,4}[-]?\d{3,4}$/),
	logradouroNome String minlength(2) maxlength(70),
    logradouroNumero String maxlength(4),
    logradouroComplemento String maxlength(50),
    bairro String minlength(3) maxlength(30),
	cep String pattern(/^[0-9]{5}-[0-9]{3}$/),
	cidade String minlength(3) maxlength(30),
	estado Estado,
    observacao String
}

//Funcionário

entity EspecialidadeSaude {
  descricao String required unique minlength(3) maxlength(70),
  sigla String required unique minlength(2) maxlength(10),
  ativo Boolean
}

entity Funcionario{
	nomeCompleto String required maxlength(DEFAULT_MAX_LENGTH),
    foto ImageBlob,
    dataNascimento LocalDate required,
    numeroConselhoProfissional String maxlength(20),
    cpf String pattern (/(\d{3})(\d{3})(\d{3})(\d{2})/),
    rg String maxlength(15),
    cnh String maxlength(15),
    celular String required pattern(/^(\d{2,3}|\(\d{2,3}\))?[ ]?\d{3,4}[-]?\d{3,4}$/),
    email String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
    dataAdmissao LocalDate,
    dataDesligamento LocalDate,
    salario BigDecimal,
    sexo Sexo required,
    estadoCivil EstadoCivil,
    escolaridade Escolaridade,
    funcao CategoriaFuncionario required,
    descOutraFuncao String required maxlength(40),
    logradouroNome String minlength(5) maxlength(70),
    logradouroNumero String maxlength(5),
    logradouroComplemento String maxlength(50),
    bairro String minlength(DEFAULT_MIN_LENGTH) maxlength(30),
    proximidadesLogradouro String maxlength(50),
	cep String pattern(/^[0-9]{5}-[0-9]{3}$/),
	cidade String minlength(DEFAULT_MIN_LENGTH) maxlength(30),
	estado Estado,
    dataHoraCadastro Instant required,
    observacao String maxlength(255),
    curriculo AnyBlob
}


relationship OneToOne {
	Funcionario{user(login)} to User
}

relationship ManyToOne {
	Funcionario{especialidadeSaude(descricao)} to EspecialidadeSaude
}


filter Fornecedor
filter Cliente
filter Funcionario

paginate EspecialidadeSaude with infinite-scroll
paginate Fornecedor with pagination
paginate Cliente with pagination
paginate Funcionario with pagination

service Cliente, Funcionario with serviceClass

skipClient * except Funcionario, Cliente, Fornecedor // This will make the client code generation to be skipped
skipServer * except Funcionario, Cliente, Fornecedor // This will make the server code generation to be skipped
